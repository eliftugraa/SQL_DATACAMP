Begin by selecting all columns from the cities table, using the SQL shortcut that selects all.

SELECT * FROM cities;

Perform an inner join with the cities table on the left and the countries table on the right; do not alias tables here or in the next step.

SELECT * 
FROM cities
INNER JOIN countries
ON cities.country_code = countries.code;

Complete the SELECT statement to keep only the name of the city, the name of the country, and the region the country is located in (in the order specified).
Alias the name of the city AS city and the name of the country AS country.

SELECT cities.name AS city, countries.name AS country, countries.region 
FROM cities
INNER JOIN countries
ON cities.country_code = countries.code;


Perform an inner join of countries AS c (left) with populations AS p (right), on code.
Select name, year and fertility_rate.

SELECT name, year, fertility_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code;

Chain another inner join to your query with the economies table AS e, using code.
Select name, and using table aliases, select year and unemployment_rate from economies.

SELECT name, fertility_rate, e.year, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
INNER JOIN economies AS E
ON c.code = e.code;

Modify your query so that you are joining to economies on year as well as code.

SELECT name, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
INNER JOIN economies AS e
ON c.code = e.code
	AND e.year = p.year;
	
Perform an inner join with cities AS c1 on the left and countries as c2 on the right.
Use code as the field to merge your tables on.

SELECT 
    c1.name AS city,
    code,
    c2.name AS country,
    region,
    city_proper_pop
FROM cities AS c1
INNER JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;

Change the code to perform a LEFT JOIN instead of an INNER JOIN.

SELECT 
	c1.name AS city, 
	code, 
	c2.name AS country,
	region, 
	city_proper_pop
FROM cities AS c1
LEFT JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;

Complete the LEFT JOIN with the countries table on the left and the economies table on the right on the code field.
Filter the records from the year 2010.

SELECT name, region, gdp_percapita
FROM countries AS c
LEFT JOIN economies AS e
ON c.code = e.code
WHERE year = 2010;

Calculate per capita GDP per region, begin by grouping by region adn use AVG function with AS avg_gdp as your alias

SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
GROUP BY region;

Order the result set by the average GDP per capita from highest to lowest.
Return only the first 10 records in your result.

SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
GROUP BY region
ORDER BY avg_gdp DESC
LIMIT 10;

Perform a full join with countries (left) and currencies (right).
Filter for the North America region or NULL country names.

SELECT name AS country, code, region, basic_unit
FROM countries
FULL JOIN currencies
USING (code)
WHERE region = 'North America'
	OR name IS NULL
ORDER BY region;

Repeat the same query as before, turning your full join into a left join with the currencies table.

SELECT name AS country, code, region, basic_unit
FROM countries
LEFT JOIN currencies
USING (code)
WHERE region = 'North America' 
	OR name IS NULL
ORDER BY region;

CHAINING FULL JOINS

Complete the FULL JOIN with countries as c1 on the left and languages as l on the right, using code to perform this join.
Next, chain this join with another FULL JOIN, placing currencies on the right, joining on code again.

SELECT 
	c1.name AS country, 
	region, 
	l.name AS language,
	basic_unit, 
	frac_unit
FROM countries as c1 
FULL JOIN languages AS l
USING(code)
FULL JOIN currencies AS c2
USING (code);

