Write SQL code that returns a result set with just one column listing the unique authors in the books table.

SELECT DISTINCT author FROM books;

Update the code to return the unique author and genre combinations in the books table.

SELECT DISTINCT author, genre FROM books;

Add an alias to the SQL query to rename the author column to unique_author in the result set.

SELECT DISTINCT author AS unique_author FROM books;

Add a single line of code that saves the results of the written query as a view called library_authors.

CREATE VIEW library_authors AS
SELECT DISTINCT author AS unique_author
FROM books;

Check that the view was created by selecting all columns from library_authors.

SELECT * FROM library_authors;

Count the number of records in the people table, aliasing the result as count_records. 

SELECT COUNT(*) AS count_records 
FROM people;

Count the number of records with a birthdate in the people table, aliasing the result as count_birthdate. 

SELECT COUNT(birthdate) AS count_birthdate 
FROM people;

Count the languages and countries in the films table; alias as count_languages and count_countries. 

SELECT COUNT(languages) AS count_languages, COUNT(countries) AS count_countries 
FROM films;

Return the unique countries represented in the films table using DISTINCT. 

SELECT DISTINCT(ccountries) 
FROM films;

Return the number of unique countries represented in the films table, aliased as count_distinct_countries. 

SELECT DISTINCT(country) 
FROM films;

Return the number of unique countries represented in the films table, aliased as count_distinct_countries. 

SELECT DISTINCT(country) AS count_distinct_countries 
FROM films;

Select the film_id and imdb_score from the reviews table and filter on scores higher than 7.0. 

SELECT film_id, imdb_score FROM reviews 
WHERE imdb_score > 7.0;

Select film_ids and facebook_likes for ten records with less than 1000 likes 

SELECT film_id , facebook_likes 
FROM reviews 
WHERE facebook_likes < 1000 
LIMIT 10; 

Count how many records have a num_votes of at least 100,000; use the alias films_over_100K_votes. 

SELECT COUNT(*) AS films_over_100K_votes 
FROM reviews 
WHERE num_votes >= 100000; 

Select and count the language field using the alias count_spanish. Apply a filter to select only Spanish from the language field.
 
SELECT COUNT(language) AS count_spanish 
FROM films 
WHERE language = 'Spanish'; 

Select the title and release_year for all German-language films released before 2000. 

SELECT title, release_year 
FROM films 
WHERE release_year < 2000 
AND language = 'German'; 

Update the query from the previous step to show German-language films released after 2000 rather than before. 

SELECT title, release_year 
FROM films 
WHERE release_year > 2000 
AND language = 'German'; 

Select all details for German-language films released after 2000 but before 2010 using only WHERE and AND. 

SELECT * FROM films 
WHERE language = 'German' 
AND release_year > 2000 
AND release_year < 2010; 

Select the title and release_year for films released in 1990 or 1999 using only WHERE and OR. 

SELECT title, release_year 
FROM films 
WHERE release_year = 1990
OR release_year = 1999; 

Another way for the query --> Select the title and release_year for films released in 1990 or 1999 using only WHERE and OR. 

SELECT title, release_year FROM films 
WHERE (release_year = 1990 OR release_year = 1999) 

Add a filter to see only English or Spanish-language films 

AND (language = 'English' OR language = 'Spanish'); 

Finally, restrict the query to only return films worth more than $2,000,000 gross. 

SELECT title, release_year 
FROM films 
WHERE (release_year = 1990 OR release_year = 1999) 
AND (language = 'English' OR language = 'Spanish') 

Filter films with more than $2,000,000 gross 

AND gross > '2000000'; 

Select the title and release_year of all films released between 1990 and 2000 (inclusive) using BETWEEN. 

SELECT title, release_year 
FROM films 
WHERE release_year BETWEEN 1990 AND 2000; 

Build on your previous query to select only films with a budget over $100 million. 

AND budget > 100000000; 

Restrict the query to only Spanish-language films 

AND language = 'Spanish'; 

Finally, amend the query to include all Spanish-language or French-language films with the same criteria. 

SELECT title, release_year 
FROM films 
WHERE release_year BETWEEN 1990 AND 2000 
AND budget > 100000000 
AND (language = 'Spanish' OR language = 'French'); 

Select the names of all people whose names begin with 'B'. 

SELECT name 
FROM people 
WHERE name LIKE 'B%'; 

Select the names of people whose names have 'r' as the second letter. 

SELECT name 
FROM people 
WHERE name LIKE '_r%'; 

Select the names of people whose names don't start with 'A'. 

SELECT name 
FROM people 
WHERE name NOT LIKE 'A%'; 

Select the title and release_year of all films released in 1990 or 2000 that were longer than two hours. 

SELECT title, release_year 
FROM films 
WHERE release_year IN ('1990','2000') 
AND duration > 120; 

Select the title and language of all films in English, Spanish, or French using IN. 

SELECT title, language 
FROM films 
WHERE language IN ('English', 'Spanish','French'); 

Select the names of people whose names don't start with 'A'. 

SELECT name 
FROM people 
WHERE name NOT LIKE 'A%'; 


Select the title, certification and language of all films certified NC-17 or R that are in English, Italian, or Greek. 

SELECT title, certification, language 
FROM films 
WHERE language IN ('English', 'Italian','Greek') 
AND certification IN('NC-17', 'R'); 

Count the unique titles from the films database and use the alias provided. 
Filter to include only movies with a release_year from 1990 to 1999, inclusive. 
Add another filter narrowing your query down to English-language films. 
Add a final filter to select only films with 'G', 'PG', 'PG-13' certifications. 


SELECT COUNT(DISTINCT title)AS nineties_english_films_for_teens 
FROM films 
WHERE release_year BETWEEN 1990 AND 1999  
AND language = 'English' 
AND certification IN('G', 'PG', 'PG-13'); 

Select the title of every film that doesn't have a budget associated with it and use the alias no_budget_info. 

SELECT title AS no_budget_info  
FROM films 
WHERE budget IS NULL; 

Count the number of films with a language associated with them and use the alias count_language_known. 

SELECT COUNT (*) AS count_language_known 
FROM films 
WHERE language IS NOT NULL; 

Use the SUM() function to calculate the total duration of all films and alias with total_duration. 

SELECT SUM(duration) AS total_duration 
FROM films 
 
Calculate the average duration of all films and alias with average_duration. 

SELECT AVG(duration) AS average_duration  
FROM films; 

Find the most recent release_year in the films table, aliasing as latest_year. 

SELECT MAX(release_year) AS latest_year  
FROM films; 

Find the duration of the shortest film and use the alias shortest_film. 

SELECT MIN(duration) AS shortest_film  
FROM films; 

Use SUM() to calculate the total gross for all films made in the year 2000 or later, and use the alias total_gross. 

SELECT SUM(gross) AS total_gross FROM films 
WHERE release_year >= 2000; 

Calculate the average amount grossed by all films whose titles start with the letter 'A' and alias with avg_gross_A. 

SELECT AVG(gross) AS avg_gross_A 
FROM films 
WHERE title LIKE 'A%'; 

Calculate the lowest gross film in 1994 and use the alias lowest_gross. 

SELECT MIN(gross) AS lowest_gross 
FROM films 
WHERE release_year = 1994; 

Calculate the highest gross film between 2000 and 2012, inclusive, and use the alias highest_gross. 

SELECT MAX(gross) AS highest_gross 
FROM films  
WHERE release_year 
BETWEEN 2000 and 2012; 

Calculate the average facebook_likes to one decimal place and assign to the alias, avg_facebook_likes. 

SELECT ROUND(AVG(facebook_likes), 1) AS avg_facebook_likes 
FROM reviews; 

Calculate the average budget from the films table, aliased as avg_budget_thousands, and round to the nearest thousand. 

SELECT ROUND(AVG(budget), -3) AS avg_budget_thousands 
FROM films; 

Select the title and duration in hours for all films and alias as duration_hours; since the current durations are in minutes,
you'll need to divide duration by 60.0. 

SELECT title, duration / 60.0 AS duration_hours 
FROM films; 

Calculate the percentage of people who are no longer alive 

SELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead 
FROM people; 

Find how many decades the films table covers by using MIN() and MAX() and alias as number_of_decades. 

SELECT (MAX(release_year) - MIN(release_year)) / 10.0 AS number_of_decades 
FROM films; 

Update the query by adding ROUND() around the calculation and round to two decimal places. 

SELECT title, ROUND(duration / 60.0, 2) AS duration_hours 
FROM films; 

ORDER BY

Select the name of each person in the people table, sorted alphabetically.

SELECT name FROM people
ORDER BY name;

Select the title and duration for every film, from longest duration to shortest.

SELECT title, duration FROM films
ORDER BY duration DESC;

Select the release_year, duration, and title of films ordered by their release year and duration, in that order.

SELECT release_year, duration, title FROM films
ORDER BY release_year, duration;

Select the certification, release_year, and title from films ordered first by certification (alphabetically) and second by release year, 
starting with the most recent year.

SELECT release_year, certification, title FROM films
ORDER BY certification, release_year DESC;

Select the release_year and count of films released in each year aliased as film_count.

SELECT release_year, COUNT(*) AS film_count
FROM films
GROUP BY release_year;

Select the release_year and average duration aliased as avg_duration of all films, grouped by release_year.

SELECT release_year, AVG(duration) AS avg_duration
FROM films
GROUP BY release_year;

Select the release_year, country, and the maximum budget aliased as max_budget for each year and each country; sort your results by release_year and country.

SELECT release_year, country, MAX(budget) AS max_budget
FROM films
GROUP BY release_year, country;

WHICH release_year had the most language diversity?

SELECT COUNT(DISTINCT language), release_year
FROM films
GROUP BY release_year
ORDER BY release_year DESC;

Select country from the films table, and get the distinct count of certification aliased as certification_count.
Group the results by country.
Filter the unique count of certifications to only results greater than 10.

SELECT country, COUNT(DISTINCT certification) AS certification_count FROM films
GROUP BY country
HAVING COUNT(DISTINCT certification) > 10;
